ls -a : to view all hiddent files

$git init -- to initialize git repo

 git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

$ ls .git to view inside git folder - now any changes made to project will be saved here
git status
$ git add . -to save to the stage (. means everything or we can also write names of each file)
$ git commit -m "file is added"  - changes saved (-m means any msg to be annoted)

"git commit -a  -- to commit and stage simultaneously.
cat filename -- to see changes
$ git restore --staged cmdList.txt  --to reverse the staging 
$ git log -- to view history 

$ rm -rf cmdList.txt -- delete a file if it is commited even once it can be retrieved
git reset fj04j4#... - provide hash id to revert the changes.

git stash -- go back to the backstage -- do changes/test . save local changes it basically goes to the last commited stage .
git stash pop -- to bring back changes made & removed by git stash
git stash clear -- all the changes made will be cleared

Linking to github
git remote -v --shows all the attached files and folders
git remote add origin (https:.....) -- To link our github repo with the project we doing locally (here) 
here link will be saved as origin like how phone-numbers saved as contacts

git push origin branch --to push the changes to url 

git remote remove origin -- delete

Branches
git branch feature -- create a branch
git checkout feature -- to move to feature branch

create a separate branch to run tests
here Head will be pointing to the current working branch
all the commits will be made will be added to branch pointed by Head

git merge feature -- to merge feature with master (it's a pull req)+

git push origin branch_name  -- push a particular branch

--working with other branches--
create a copy of the repo into our own account use fork choose account
git clone url (creates folder and downloads content)

git remote add upstream url.. -- add forked project (instead of origin we give upstream)


pull requests -- for each feature 1 pr.
 
force push..
git origin feature -f

git fetch --all --prune -- fetch commits from upstream (prune -deleted changes also fetched)
git reset --hard upstream/master (reset master branch of origin to master branch of upstream ) 
then push using push command

git rebase -i hashcode   (squash -- multi commits will be squashed(merge)

merge conflicts
